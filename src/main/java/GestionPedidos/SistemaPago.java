/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GestionPedidos;

import javax.swing.JOptionPane;

/**
 *
 * @author MSI
 */
public class SistemaPago extends javax.swing.JFrame {
    
    float importePedido;
    String datosPedido="";

    /**
     * Creates new form SistemaPagos2
     * @param importePedido
     */
    public SistemaPago(float importePedido,String datosPedido) {
        initComponents();
        
        this.datosPedido=datosPedido;
        this.importePedido=importePedido;
        
        //Se muestra el importe del pedido generado previamente...
        tfImportePagar.setText(String.valueOf(importePedido));
        tfImportePagar.setEditable(false);
        tfImportePagar.setEnabled(false);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btGroupSeleccion = new javax.swing.ButtonGroup();
        lblMetodoPago = new javax.swing.JLabel();
        rbEfectivo = new javax.swing.JRadioButton();
        rbCuenta = new javax.swing.JRadioButton();
        rbTarjeta = new javax.swing.JRadioButton();
        lblImportePagar = new javax.swing.JLabel();
        lblIImporteIngresar = new javax.swing.JLabel();
        tfImportePagar = new javax.swing.JTextField();
        tfImporteIngresar = new javax.swing.JTextField();
        btnPagar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        taDatosPago = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAlwaysOnTop(true);

        lblMetodoPago.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblMetodoPago.setText("Indique un método de pago");

        btGroupSeleccion.add(rbEfectivo);
        rbEfectivo.setSelected(true);
        rbEfectivo.setText("Efectivo");
        rbEfectivo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rbEfectivoItemStateChanged(evt);
            }
        });

        btGroupSeleccion.add(rbCuenta);
        rbCuenta.setText("Cuenta");
        rbCuenta.setToolTipText("Cuneta");
        rbCuenta.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rbCuentaItemStateChanged(evt);
            }
        });
        rbCuenta.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                rbCuentaKeyPressed(evt);
            }
        });

        btGroupSeleccion.add(rbTarjeta);
        rbTarjeta.setText("Tarjeta");
        rbTarjeta.setToolTipText("Tarjeta");
        rbTarjeta.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rbTarjetaItemStateChanged(evt);
            }
        });
        rbTarjeta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbTarjetaActionPerformed(evt);
            }
        });

        lblImportePagar.setText("El importe a pagar (en €)  :");

        lblIImporteIngresar.setText("El importe a ingresar (en €)  :");

        tfImportePagar.setToolTipText("Importe a pagar");
        tfImportePagar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfImportePagarActionPerformed(evt);
            }
        });

        tfImporteIngresar.setToolTipText("");

        btnPagar.setText("Pagar");
        btnPagar.setToolTipText("Pagar");
        btnPagar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPagarActionPerformed(evt);
            }
        });

        taDatosPago.setColumns(20);
        taDatosPago.setRows(5);
        jScrollPane1.setViewportView(taDatosPago);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(rbEfectivo)
                                .addGap(84, 84, 84)
                                .addComponent(rbCuenta)
                                .addGap(65, 65, 65)
                                .addComponent(rbTarjeta))
                            .addComponent(lblMetodoPago, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(84, 84, 84)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblIImporteIngresar, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(tfImporteIngresar, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblImportePagar, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(147, 147, 147)
                                .addComponent(tfImportePagar, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 66, Short.MAX_VALUE)
                        .addComponent(btnPagar)
                        .addGap(97, 97, 97)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(lblMetodoPago)
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbEfectivo)
                    .addComponent(rbCuenta)
                    .addComponent(rbTarjeta))
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblImportePagar)
                    .addComponent(tfImportePagar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblIImporteIngresar)
                            .addComponent(tfImporteIngresar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(28, 28, 28)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 279, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnPagar)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(14, 14, 14))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

   
    private void rbEfectivoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rbEfectivoItemStateChanged

        if(rbEfectivo.isSelected()){
            lblIImporteIngresar.setText("El importe a ingresar es (€)  :"+importePedido);
            tfImporteIngresar.setSize(15,5);
            tfImporteIngresar.setText("");
        }

    }//GEN-LAST:event_rbEfectivoItemStateChanged

    private void rbCuentaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rbCuentaItemStateChanged

        if(rbCuenta.isSelected()){
            lblIImporteIngresar.setText("Introduzca su numero de cuenta (20 digitos) :\n");
            tfImporteIngresar.setSize(20,5);
            tfImporteIngresar.setText("");
        }
    }//GEN-LAST:event_rbCuentaItemStateChanged

    private void rbCuentaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_rbCuentaKeyPressed

    }//GEN-LAST:event_rbCuentaKeyPressed

    private void rbTarjetaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rbTarjetaItemStateChanged

        if(rbTarjeta.isSelected()){
            lblIImporteIngresar.setText("Introduzca su numero de tarjeta (15 digitos) :\n");
            tfImporteIngresar.setSize(15,5);
            tfImporteIngresar.setText("");
        }

    }//GEN-LAST:event_rbTarjetaItemStateChanged

    private void tfImportePagarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfImportePagarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfImportePagarActionPerformed

    private void btnPagarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPagarActionPerformed

        //Se capturan los importes a pagar e ingresar y se calcula la devolucion
        float importePagar;
        float importeIngresar;
        float fDiff1;

        if(btnPagar.getText().equals("IMPRIMIR TICKET")){
            //Se llama a la clase con la interfaz Imprimible

            Impresion ticket=new Impresion(datosPedido);
           
         

        }// fin boton IMPRIMIR TICKET

        if(btnPagar.getText().equals("Pagar"))
        {
            if(rbEfectivo.isSelected()) {
                
                importePagar=Float.parseFloat(tfImportePagar.getText());
                
                try{
                        
                     importeIngresar=Float.parseFloat(this.tfImporteIngresar.getText());
                     
                        if((importeIngresar<=0)||(importeIngresar<importePagar)){
                            try{
                            throw new MisExcepciones(10);
                            }catch(MisExcepciones e){
                            e.getMessage();
                            }
                        }else{
                            //Todo ok
                            fDiff1=(float) (importeIngresar-importePagar);
                            //Se limita la precisión a 2 decimales
                            fDiff1= (float) Math.round(fDiff1 * 100) / 100;
                            taDatosPago.append("La diferencia a devolver es: "+fDiff1+" €\n");
                            //Se guarda la diferencia original
                            float fDiff_aux=fDiff1;

                            //Se calculan las vueltas dependiendo de la diferencia calculada
                            if (fDiff_aux>=50.00) {
                            //Se calcula el cociente para saber el numero de billetes a devolver
                            int iBilletes50=(int) (fDiff_aux/50);

                            taDatosPago.append("Se devuelve(n) "+iBilletes50+" billete(s) de 50 euros...\n");
                            //Se actualiza la diferencia a devolver
                            fDiff_aux=fDiff1-iBilletes50*50;
                            }//billetes 50

                            if (fDiff_aux>=20.00) {
                            //Se calcula el cociente para saber el numero de billetes a devolver
                            int iBilletes20=(int) (fDiff_aux/20);

                            taDatosPago.append("Se devuelve(n) "+iBilletes20+" billete(s) de 20 euros...\n");
                            //Se actualiza la diferencia a devolver
                            fDiff_aux=fDiff_aux-iBilletes20*20;
                            }//billetes 20

                            if (fDiff_aux>=10.00) {
                            //Se calcula el cociente para saber el numero de billetes a devolver
                            int iBilletes10=(int) (fDiff_aux/10);

                            taDatosPago.append("Se devuelve(n) "+iBilletes10+" billete(s) de 10 euros...\n");
                            //Se actualiza la diferencia a devolver
                            fDiff_aux=fDiff_aux-iBilletes10*10;
                            }//billetes 10

                            if (fDiff_aux>=5.00) {
                            //Se calcula el cociente para saber el numero de billetes a devolver
                            int iBilletes5=(int) (fDiff_aux/5);

                            taDatosPago.append("Se devuelve(n) "+iBilletes5+" billete(s) de 5 euros...\n");
                            //Se actualiza la diferencia a devolver
                            fDiff_aux=fDiff_aux-iBilletes5*5;
                            }//billetes 5

                            if (fDiff_aux>=2.00) {
                            //Se calcula el cociente para saber el numero de monedas a devolver
                            int iMonedas2=(int) (fDiff_aux/2);

                            taDatosPago.append("Se devuelve(n) "+iMonedas2+" moneda(s) de 2 euros...\n");
                            //Se actualiza la diferencia a devolver
                            fDiff_aux=fDiff_aux-iMonedas2*2;
                            }//monedas 2

                            if (fDiff_aux>=1.00) {
                            //Se calcula el cociente para saber el numero de monedas a devolver
                            int iMonedas=(int) (fDiff_aux/1);
                            taDatosPago.append("Se devuelve(n) "+iMonedas+" moneda(s) de 1 euro...\n");
                            fDiff_aux=fDiff_aux-iMonedas*1;

                            }//monedas 1

                            //Se devuelve(n)n los centimos restantes que seran los dos decimales restantes
                            int iCentimos=(int) (fDiff_aux*100);
                            taDatosPago.append("Se devuelve(n) "+iCentimos+" centimo(s)...\n");
                            taDatosPago.append("Devolucion completada.\n");
                            //centimos

                            //Se informa al usuario de que el pago se ha realizado ok
                            taDatosPago.append("Pago en EFECTIVO realizado correctamente...\n");
                            //Se cambia el texto del boton a IMPRIMIR TICKET...
                            btnPagar.setText("IMPRIMIR TICKET");
                        }
                }catch (NumberFormatException ex){
                     JOptionPane.showMessageDialog(null,"Formato de importe a ingresar incorrecto. Revise dicho valor por favor");
                     //ex.printStackTrace();
                }
                
            }//fin pago efectivo

            if(rbCuenta.isSelected()) {

                String num_cuenta;
                num_cuenta=tfImporteIngresar.getText();                 

                    if(num_cuenta.length()!=20){
                        
                        try{
                            throw new MisExcepciones(12);
                            }catch(MisExcepciones e){
                            e.getMessage();
                            }
                        
                     
                    }else{
                        
                        boolean cuenta_valida=true;
                        
                            //Se comprueba si hay algun caracter que no sea numero o espacio en blanco
                            for(int i=0;i<num_cuenta.length();i++){
                            char c=num_cuenta.charAt(i);

                                if(((c>='0') && (c<='9'))) {
                                //Valores validos
                                }else {
                                //Valores no validos
                                    try{
                                    throw new MisExcepciones(11);
                                    }catch(MisExcepciones e){
                                    e.getMessage();
                                    }
                                 cuenta_valida=false;

                                }//if
                            }//for
                        
                            if(cuenta_valida){
                            taDatosPago.append("El numero de cuenta introducido "+num_cuenta+" es correcto...\n" );
                            taDatosPago.append("Pago en CUENTA realizado correctamente por importe de: "+this.importePedido+" € \n");
                            //Se cambia el texto del boton a IMPRIMIR TICKET...
                            btnPagar.setText("IMPRIMIR TICKET");
                            }//if cuenta_valida
                    }

            }//fin pago cuenta

            if(rbTarjeta.isSelected()) {
                
                 String num_tarjeta;
                num_tarjeta=tfImporteIngresar.getText();                 

                    if(num_tarjeta.length()!=15){
                        
                        try{
                            throw new MisExcepciones(13);
                            }catch(MisExcepciones e){
                            e.getMessage();
                            }
                        
                     
                    }else{
                        
                        boolean tarjeta_valida=true;
                        
                            //Se comprueba si hay algun caracter que no sea numero o espacio en blanco
                            for(int i=0;i<num_tarjeta.length();i++){
                            char c=num_tarjeta.charAt(i);

                                if(((c>='0') && (c<='9'))) {
                                //Valores validos
                                }else {
                                //Valores no validos
                                    try{
                                    throw new MisExcepciones(14);
                                    }catch(MisExcepciones e){
                                    e.getMessage();
                                    }
                                 tarjeta_valida=false;

                                }//if
                            }//for
                        
                            if(tarjeta_valida){
                            taDatosPago.append("El numero de tarjeta introducido "+num_tarjeta+" es correcto...\n" );
                            taDatosPago.append("Pago en TARJETA realizado correctamente por importe de: "+this.importePedido+" € \n");
                            //Se cambia el texto del boton a IMPRIMIR TICKET...
                            btnPagar.setText("IMPRIMIR TICKET");
                            }//if tarjeta_valida
                    }

               
            }//fin pago tarjeta

            
            //Se concatena a los datos del pedido los datos del pago...
            
            datosPedido=datosPedido+"\n"+taDatosPago.getText();

        }// fin boton Pagar
        
        
    }//GEN-LAST:event_btnPagarActionPerformed

    private void rbTarjetaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbTarjetaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbTarjetaActionPerformed

       private void btnPagarActionPerformed() {                                         
        
         //Se capturan los importes a pagar e ingresar y se calcula la devolucion
        float importePagar;
        float importeIngresar;
        float fDiff1;
        
        
        if(btnPagar.getText().equals("IMPRIMIR TICKET")){
            //Se llama a la clase con la interfaz Imprimible
            
            Impresion ticket=new Impresion(datosPedido);
            
        }// fin boton IMPRIMIR TICKET
        
        
        if(btnPagar.getText().equals("Pagar"))
        {
        	if(rbEfectivo.isSelected()) {
        	importePagar=Float.parseFloat(tfImportePagar.getText());
                importeIngresar=Float.parseFloat(tfImporteIngresar.getText());
                
                fDiff1=(float) (importeIngresar-importePagar);
                //Se limita la precisión a 2 decimales
                fDiff1= (float) Math.round(fDiff1 * 100) / 100;
                taDatosPago.append("La diferencia a devolver es: "+fDiff1+" €\n");
                //Se guarda la diferencia original
                float fDiff_aux=fDiff1;

                 	//Se calculan las vueltas dependiendo de la diferencia calculada
                    if (fDiff_aux>=50.00) {
                    //Se calcula el cociente para saber el numero de billetes a devolver
                    int iBilletes50=(int) (fDiff_aux/50);
        					
                    taDatosPago.append("Se devuelve(n) "+iBilletes50+" billete(s) de 50 euros...\n");
                    //Se actualiza la diferencia a devolver
                    fDiff_aux=fDiff1-iBilletes50*50;
                    }//billetes 50
        				
                    if (fDiff_aux>=20.00) {
                    //Se calcula el cociente para saber el numero de billetes a devolver
                    int iBilletes20=(int) (fDiff_aux/20);
                    
                    taDatosPago.append("Se devuelve(n) "+iBilletes20+" billete(s) de 20 euros...\n");
                    //Se actualiza la diferencia a devolver
                    fDiff_aux=fDiff_aux-iBilletes20*20;
                    }//billetes 20
        				
                    if (fDiff_aux>=10.00) {
                    //Se calcula el cociente para saber el numero de billetes a devolver
                    int iBilletes10=(int) (fDiff_aux/10);
        					
                    taDatosPago.append("Se devuelve(n) "+iBilletes10+" billete(s) de 10 euros...\n");
                    //Se actualiza la diferencia a devolver
                    fDiff_aux=fDiff_aux-iBilletes10*10;
                    }//billetes 10
        				
                    if (fDiff_aux>=5.00) {
                    //Se calcula el cociente para saber el numero de billetes a devolver
                    int iBilletes5=(int) (fDiff_aux/5);
        					
                    taDatosPago.append("Se devuelve(n) "+iBilletes5+" billete(s) de 5 euros...\n");
                    //Se actualiza la diferencia a devolver
                    fDiff_aux=fDiff_aux-iBilletes5*5;
                    }//billetes 5
        				
                    if (fDiff_aux>=2.00) {
                    //Se calcula el cociente para saber el numero de monedas a devolver
                    int iMonedas2=(int) (fDiff_aux/2);
        					
                    taDatosPago.append("Se devuelve(n) "+iMonedas2+" moneda(s) de 2 euros...\n");
                    //Se actualiza la diferencia a devolver
                    fDiff_aux=fDiff_aux-iMonedas2*2;
                    }//monedas 2
        				
                    if (fDiff_aux>=1.00) {
                    //Se calcula el cociente para saber el numero de monedas a devolver
                    int iMonedas=(int) (fDiff_aux/1);
                    taDatosPago.append("Se devuelve(n) "+iMonedas+" moneda(s) de 1 euro...\n");
                    fDiff_aux=fDiff_aux-iMonedas*1;
        					
                    }//monedas 1
        				
                    //Se devuelve(n)n los centimos restantes que seran los dos decimales restantes
                    int iCentimos=(int) (fDiff_aux*100);
                    taDatosPago.append("Se devuelve(n) "+iCentimos+" centimo(s)...\n");
                    taDatosPago.append("Devolucion completada.\n");
                    //centimos
        					
                    //Se informa al usuario de que el pago se ha realizado ok
                    taDatosPago.append("Pago en EFECTIVO realizado correctamente...\n");
        	}//fin pago efectivo
        
        
        	if(rbCuenta.isSelected()) {
                    
                    boolean esCuentaValida=true;
			
			do {
				String num_cuenta;
                                num_cuenta=tfImporteIngresar.getText();
				
				taDatosPago.append("Número de cuenta introducido : "+num_cuenta+" \n");
				
				//Se comprueba si hay algun caracter que no sea numero o espacio en blanco
				for(int i=0;i<num_cuenta.length();i++){
					char c=num_cuenta.charAt(i);
			
					if(((c>='0') && (c<='9'))) {
						//Valores validos
					}else {
						//Valores no validos
						taDatosPago.append("Se han introducido valores no validos en el número de cuenta: posicion "+i+", caracter "+c+" |n");
						esCuentaValida=false;
					}
				}//for
				
				if(num_cuenta.length()!=20) {
					taDatosPago.append("Longitud de numero de cuenta incorrecta. Vuelva a introducirla , por favor \n");
					esCuentaValida=false;
				}else{
                                        taDatosPago.append("El numero de cuenta introducido es correcto...\n" );
					esCuentaValida=true;
				}
				
			}while(esCuentaValida);
			
			taDatosPago.append("Pago en CUENTA realizado correctamente...");
        		
        	}//fin pago cuenta
        	
        	if(rbTarjeta.isSelected()) {
                    
                    boolean esTarjetaValida=true;
                    
			do {	
                                
                                String num_tarjeta;
                                num_tarjeta=tfImporteIngresar.getText();
			
				taDatosPago.append("Número de tarjeta introducido: "+num_tarjeta+" \n" );
				
				//Se comprueba si hay algun caracter que no sea numero o espacio en blanco
					for(int i=0;i<num_tarjeta.length();i++){
						char c=num_tarjeta.charAt(i);
				
						if(((c>='0') && (c<='9')) || (c==' ')) {
							//Valores validos
						}else {
							//Valores no validos
							taDatosPago.append("Se han introducido valores no validos en el número de trajeta: posicion "+i+", caracter "+c+" \n");
							esTarjetaValida=true;
						}
					}//for
				
					switch(num_tarjeta.charAt(0)) {
					
					case '3':
						
						//Se comprueba si tiene longitud de 15 digitos
						if(num_tarjeta.length()!=15) {
                                                    taDatosPago.append("Longitud de numero de tarjeta incorrecta.Vuelva a introducirla , por favor \n");
                                                    esTarjetaValida=true;
						}else{
                                                    taDatosPago.append("El numero de tarjeta introducido es correcto...\n" );
                                                    taDatosPago.append("Tarjeta American Express..");
						esTarjetaValida=false;
						}
					break;
					
					case '4':
						
						//Se comprueba si tiene longitud de 15 digitos
						if(num_tarjeta.length()!=16) {
							taDatosPago.append("Longitud de numero de tarjeta incorrecta.Vuelva a introducirla , por favor \n");
							esTarjetaValida=true;
						}else {
                                                        taDatosPago.append("El numero de tarjeta introducido es correcto...\n" );
                                                        taDatosPago.append("Tarjeta Visa...\n");
                                                        esTarjetaValida=false;
						}
					break;
					
					case '5':
						
						//Se comprueba si tiene longitud de 16 digitos
						if(num_tarjeta.length()!=16) {
							taDatosPago.append("Longitud de numero de tarjeta incorrecta.Vuelva a introducirla , por favor \n");
							esTarjetaValida=true;
						}else {
                                                        taDatosPago.append("El numero de tarjeta introducido es correcto...\n" );
                                                        taDatosPago.append("Tarjeta Master Card...\n");
						esTarjetaValida=false;
						}
					break;
					
					default:
						taDatosPago.append("Tarjeta no reconocida.Vuelva a introducirla , por favor \n");
						esTarjetaValida=true;
					break;
				
				}//switch
									
			}while(esTarjetaValida);
			
			taDatosPago.append("Pago con TARJETA realizado correctamente...\n");
				
		}//fin pago tarjeta
        
                //Se cambia el texto del boton a IMPRIMIR TICKET...
                
                btnPagar.setText("IMPRIMIR TICKET");
                
        }// fin boton Pagar
        
    }                                        

    private void tfImportePagarActionPerformed() {                                               
        // TODO add your handling code here:
    }                                              

    private void rbCuentaKeyPressed() {                                    
  
    }                                   

    private void rbCuentaItemStateChanged() {                                          
       
        if(rbCuenta.isSelected()){
        lblIImporteIngresar.setText("Introduzca su numero de cuenta (20 digitos) :\n");
        tfImporteIngresar.setSize(20,5);
         tfImporteIngresar.setText("");
        }
    }                                         

    private void rbTarjetaItemStateChanged() {                                           
        
        if(rbTarjeta.isSelected()){
        lblIImporteIngresar.setText("Introduzca su numero de tarjeta (15/16 digitos) :\n");
        tfImporteIngresar.setSize(15,5);
        tfImporteIngresar.setText("");
        }
        
    }                                          

    private void rbEfectivoItemStateChanged() {                                            
        
        if(rbEfectivo.isSelected()){
        lblIImporteIngresar.setText("El importe a ingresar es (€)  :");
        tfImporteIngresar.setSize(15,5);
        tfImporteIngresar.setText("");
        }
        
    }    
    
   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup btGroupSeleccion;
    private javax.swing.JButton btnPagar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblIImporteIngresar;
    private javax.swing.JLabel lblImportePagar;
    private javax.swing.JLabel lblMetodoPago;
    private javax.swing.JRadioButton rbCuenta;
    private javax.swing.JRadioButton rbEfectivo;
    private javax.swing.JRadioButton rbTarjeta;
    private javax.swing.JTextArea taDatosPago;
    private javax.swing.JTextField tfImporteIngresar;
    private javax.swing.JTextField tfImportePagar;
    // End of variables declaration//GEN-END:variables
}
