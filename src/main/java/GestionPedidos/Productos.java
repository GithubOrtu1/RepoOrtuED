/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package GestionPedidos;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import javax.swing.JOptionPane;

/**
 *
 * @author MSI
 */
public class Productos extends javax.swing.JInternalFrame {

    char ultimoProducto='X';


    public ArrayList<Comida> alComida2=new ArrayList<Comida>();
    public ArrayList<Bebida> alBebida2=new ArrayList<Bebida>();
    
    /**
     * Creates new form Productos
     */
    public Productos(ArrayList<Comida> alComida1, ArrayList<Bebida> alBebida1) {
        alComida2=alComida1;
        alBebida2=alBebida1;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        lblTexto = new javax.swing.JLabel();
        lblNombre = new javax.swing.JLabel();
        tfNombre = new javax.swing.JTextField();
        lblPrecio = new javax.swing.JLabel();
        tfPrecio = new javax.swing.JTextField();
        lblFechaEnvase = new javax.swing.JLabel();
        dtFechaEnvase = new com.toedter.calendar.JDateChooser();
        btnNuevoProducto = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        taDatosProductos = new javax.swing.JTextArea();
        rbComida = new javax.swing.JRadioButton();
        rbBebida = new javax.swing.JRadioButton();
        chkPerecedero = new javax.swing.JCheckBox();
        chkVegano = new javax.swing.JCheckBox();
        chkGaseoso = new javax.swing.JCheckBox();
        chkLacteo = new javax.swing.JCheckBox();
        lblCalorias = new javax.swing.JLabel();
        tfCalorias = new javax.swing.JTextField();
        lblMedida = new javax.swing.JLabel();
        tfMedida = new javax.swing.JTextField();
        btnDetalleProducto = new javax.swing.JButton();

        setClosable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("NUEVO PRODUCTO");
        setToolTipText("NUEVO PRODUCTO");

        lblTexto.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblTexto.setText("Indique los datos del nuevo producto");

        lblNombre.setText("Nombre");

        lblPrecio.setText("Precio (€)");

        lblFechaEnvase.setText("Fecha envase");

        btnNuevoProducto.setText("Grabar nuevo  producto");
        btnNuevoProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoProductoActionPerformed(evt);
            }
        });

        taDatosProductos.setColumns(20);
        taDatosProductos.setRows(5);
        jScrollPane1.setViewportView(taDatosProductos);

        buttonGroup1.add(rbComida);
        rbComida.setText("¿ Comida ?");
        rbComida.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rbComidaItemStateChanged(evt);
            }
        });

        buttonGroup1.add(rbBebida);
        rbBebida.setText("¿ Bebida ?");
        rbBebida.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rbBebidaItemStateChanged(evt);
            }
        });

        chkPerecedero.setText("Perecedero");

        chkVegano.setText("Vegano");

        chkGaseoso.setText("Gaseoso");

        chkLacteo.setText("Lacteo");

        lblCalorias.setText("Calorias");

        lblMedida.setText("Medida (ml)");

        btnDetalleProducto.setText("Detalle ultimo producto");
        btnDetalleProducto.setToolTipText("Detalle ultimo producto");
        btnDetalleProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDetalleProductoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(chkPerecedero)
                                            .addComponent(rbComida))
                                        .addGap(48, 48, 48)
                                        .addComponent(chkVegano)
                                        .addGap(229, 229, 229)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(chkGaseoso)
                                            .addComponent(rbBebida))
                                        .addGap(53, 53, 53)
                                        .addComponent(chkLacteo))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblCalorias)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(290, 290, 290)
                                                .addComponent(lblMedida)
                                                .addGap(25, 25, 25)
                                                .addComponent(tfMedida, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(98, 98, 98)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addComponent(lblFechaEnvase)
                                                        .addGap(32, 32, 32)
                                                        .addComponent(dtFechaEnvase, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addComponent(btnNuevoProducto)
                                                        .addGap(52, 52, 52)
                                                        .addComponent(btnDetalleProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblNombre)
                                        .addGap(35, 35, 35)
                                        .addComponent(tfNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblPrecio)
                                        .addGap(29, 29, 29)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(tfCalorias, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(tfPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addComponent(lblTexto, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1024, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(lblTexto, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbComida)
                    .addComponent(rbBebida))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(chkPerecedero)
                            .addComponent(chkVegano)
                            .addComponent(chkGaseoso)
                            .addComponent(chkLacteo))
                        .addGap(34, 34, 34)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblNombre)
                            .addComponent(tfNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblPrecio)
                            .addComponent(tfPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblCalorias)
                            .addComponent(tfCalorias, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblMedida)
                            .addComponent(tfMedida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                        .addComponent(dtFechaEnvase, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblFechaEnvase)))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnNuevoProducto)
                    .addComponent(btnDetalleProducto))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnNuevoProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoProductoActionPerformed

        if(this.rbComida.isSelected()){
        
        comprobarExcepcionesNuevaComida();
        
        }
    
        if(this.rbBebida.isSelected()){
        
        comprobarExcepcionesNuevaBebida();
        }
    }
    
    private void comprobarExcepcionesNuevaComida(){
    //Se comprueba que los campos esten informados
           
    if(((this.rbComida.isSelected()==false) && (this.rbBebida.isSelected()==false)) || this.tfNombre.getText().isEmpty()|| tfPrecio.getText().isEmpty() ||tfCalorias.getText().isEmpty()|| this.dtFechaEnvase.getDate()==null){
        
        try{
            throw new MisExcepciones(003);
            }catch(MisExcepciones e){
            e.getMessage();
            }
        
    }else{
    
        //Todos los campos estan informados...
    
        //Se comprueba que el formato de calorias sea el correcto (solo números)
    
        if(this.tfCalorias.getText().matches("[a-zA-Z]")){
        
            try{
                throw new MisExcepciones(004);
                }catch(MisExcepciones e){
                e.getMessage();
                }
            
        }else{
            
            
            //Se comprueba el formato numerico del precio
                    try{
                        
                     float f=Float.parseFloat(this.tfPrecio.getText());
                     
                        if(f<=0){
                            try{
                            throw new MisExcepciones(005);
                            }catch(MisExcepciones e){
                            e.getMessage();
                            }
                        }else{
                         
                            //Precio con formato valido
                     
                            //Todo ok. Se procede al alta del producto
            
                            //Se muestran los datos informados en el textArea asociada
                            String datos[]=new String[50];

                            //Se añade comida
                            if (rbComida.isSelected())
                            {
        
                            ultimoProducto='C';
    
                            datos[0]=this.tfNombre.getText();
                            datos[1]=this.tfPrecio.getText();
                            datos[2]=this.tfCalorias.getText();
     
                            //formato
                            SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
      
                            datos[3]=(formato.format(dtFechaEnvase.getDate()));
                            datos[4]=Boolean.toString((this.chkPerecedero.isSelected()));
                            datos[5]=Boolean.toString((this.chkVegano.isSelected()));
    
                            //Se limpian los datos del formulario...
     
                            this.tfNombre.setText("");
                            this.tfPrecio.setText("");
                            this.tfCalorias.setText("");
                            //this.dtFechaEnvase.setDate(null);
                            this.chkPerecedero.setSelected(false);
                            this.chkVegano.setSelected(false);
    
                            //Se genera un nuevo objeto tipo Comida
     
                            Comida nuevaComida=new Comida(datos[0],datos[1],datos[2],datos[3],datos[4],datos[5]);
    
                            //Se muestran los datos en el textArea
     
                            this.taDatosProductos.append("Los datos del nuevo cliente son: COMIDA Nombre: "+datos[0]+", Precio: "+datos[1]+", Calorias: "+datos[2]+" , Fecha envase: "+datos[3]+", Perecedero: "+datos[4]+", Vegano: "+datos[5]+",Fecha Caducidad :"+nuevaComida.getFechaCaducidad()+", \n");
                            this.dtFechaEnvase.setDate(null);
    
                            //Se añade al arrayList de Comida...
                            alComida2.add(nuevaComida);
     
                            TratamientoFicheros tfProductos=new TratamientoFicheros();
                            tfProductos.escribeFicheroProductos(alComida2,alBebida2,'C');
        
                            this.taDatosProductos.append("Los datos se han volcado a fichero correctamente...\n");
                            }//Comida
    
                            //Se añade bebida
                            if (rbBebida.isSelected())
                            {
        
                            ultimoProducto='B';
    
                            datos[0]=this.tfNombre.getText();
                            datos[1]=this.tfPrecio.getText();
                            datos[2]=this.tfMedida.getText();
     
                            //formato
                            SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
      
                            datos[3]=(formato.format(dtFechaEnvase.getDate()));
                            datos[4]=Boolean.toString((this.chkGaseoso.isSelected()));
                            datos[5]=Boolean.toString((this.chkLacteo.isSelected()));
     
                            //Se limpian los datos del formulario...
     
                            this.tfNombre.setText("");
                            this.tfPrecio.setText("");
                            this.tfMedida.setText("");
                            //this.dtFechaEnvase.setDate(null);
                            this.chkGaseoso.setSelected(false);
                            this.chkLacteo.setSelected(false);
     
                            //Se genera un nuevo objeto tipo Bebida
     
                            Bebida nuevaBebida=new Bebida(datos[0],datos[1],datos[2],datos[3],datos[4],datos[5]);
     
                            //Se muestran los datos en el textArea
                            this.taDatosProductos.append("Los datos del nuevo producto son: BEBIDA Nombre: "+datos[0]+", Precio: "+datos[1]+" , Medida (ml) :"+datos[2]+", Fecha envase:  :"+datos[3]+", Caseoso : "+datos[4]+", Lacteo : "+datos[5]+",Fecha Caducidad :"+nuevaBebida.getFechaCaducidad()+", \n");
                            this.dtFechaEnvase.setDate(null);
    
                            //Se añade al arrayList de Bebida...
                            alBebida2.add(nuevaBebida);
     
                            TratamientoFicheros tfProductos=new TratamientoFicheros();
                            tfProductos.escribeFicheroProductos(alComida2,alBebida2,'B');
        
                            this.taDatosProductos.append("Los datos se han volcado a fichero correctamente...\n");

                            }//Bebida
                    
                         
                         }//if precio negativo
                        
                     
                     }catch (NumberFormatException ex){
                     JOptionPane.showMessageDialog(null,"Formato de precio incorrecto. Revise el precio informado por favor");
                     //ex.printStackTrace();
                     }
                                        
                    
        }//excepcion calorias
                    
            
    }//excepcion campos vacios
    
        
    }//GEN-LAST:event_btnNuevoProductoActionPerformed

    private void comprobarExcepcionesNuevaBebida(){
    //Se comprueba que los campos esten informados
           
    if(((this.rbComida.isSelected()==false) && (this.rbBebida.isSelected()==false)) || this.tfNombre.getText().isEmpty()|| tfPrecio.getText().isEmpty() ||tfMedida.getText().isEmpty()|| this.dtFechaEnvase.getDate()==null){
        
        try{
            throw new MisExcepciones(006);
            }catch(MisExcepciones e){
            e.getMessage();
            }
        
    }else{
    
        //Todos los campos estan informados...
    
        //Se comprueba que el formato de medida sea el correcto (solo números)
    
        if(this.tfMedida.getText().matches("[a-zA-Z]")){
        
            try{
                throw new MisExcepciones(007);
                }catch(MisExcepciones e){
                e.getMessage();
                }
            
        }else{
            
            
            //Se comprueba el formato numerico del precio
                    try{
                        
                     float f=Float.parseFloat(this.tfPrecio.getText());
                     
                        if(f<=0){
                            try{
                            throw new MisExcepciones(005);
                            }catch(MisExcepciones e){
                            e.getMessage();
                            }
                        }else{
                         
                            //Precio con formato valido
                     
                            //Todo ok. Se procede al alta del producto
            
                            //Se muestran los datos informados en el textArea asociada
                            String datos[]=new String[50];
    
                            //Se añade bebida
                            if (rbBebida.isSelected())
                            {
        
                            ultimoProducto='B';
    
                            datos[0]=this.tfNombre.getText();
                            datos[1]=this.tfPrecio.getText();
                            datos[2]=this.tfMedida.getText();
     
                            //formato
                            SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
      
                            datos[3]=(formato.format(dtFechaEnvase.getDate()));
                            datos[4]=Boolean.toString((this.chkGaseoso.isSelected()));
                            datos[5]=Boolean.toString((this.chkLacteo.isSelected()));
     
                            //Se limpian los datos del formulario...
     
                            this.tfNombre.setText("");
                            this.tfPrecio.setText("");
                            this.tfMedida.setText("");
                            //this.dtFechaEnvase.setDate(null);
                            this.chkGaseoso.setSelected(false);
                            this.chkLacteo.setSelected(false);
     
                            //Se genera un nuevo objeto tipo Bebida
     
                            Bebida nuevaBebida=new Bebida(datos[0],datos[1],datos[2],datos[3],datos[4],datos[5]);
     
                            //Se muestran los datos en el textArea
                            this.taDatosProductos.append("Los datos del nuevo producto son: BEBIDA Nombre: "+datos[0]+", Precio: "+datos[1]+" , Medida (ml) :"+datos[2]+", Fecha envase:  :"+datos[3]+", Caseoso : "+datos[4]+", Lacteo : "+datos[5]+",Fecha Caducidad :"+nuevaBebida.getFechaCaducidad()+", \n");
                            this.dtFechaEnvase.setDate(null);
    
                            //Se añade al arrayList de Bebida...
                            alBebida2.add(nuevaBebida);
     
                            TratamientoFicheros tfProductos=new TratamientoFicheros();
                            tfProductos.escribeFicheroProductos(alComida2,alBebida2,'B');
        
                            this.taDatosProductos.append("Los datos se han volcado a fichero correctamente...\n");

                            }//Bebida
                    
                         
                         }//if precio negativo
                        
                     
                     }catch (NumberFormatException ex){
                     JOptionPane.showMessageDialog(null,"Formato de precio incorrecto. Revise el precio informado por favor");
                     //ex.printStackTrace();
                     }
                                        
                    
        }//excepcion calorias
                    
            
    }//excepcion campos vacios
    
        
    }       
    
    
    private void rbComidaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rbComidaItemStateChanged
     
      if(rbComida.isSelected()){
          
    //Se trata de comida. Se deshabiita todo lo relacionado con bebida
    
        this.chkGaseoso.setEnabled(false);
        this.chkLacteo.setEnabled(false);
        this.tfMedida.setEnabled(false);
      }else{
        this.chkGaseoso.setEnabled(true);
        this.chkLacteo.setEnabled(true);
        this.tfMedida.setEnabled(true);
          
      }
        
    }//GEN-LAST:event_rbComidaItemStateChanged

    private void rbBebidaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rbBebidaItemStateChanged
        
        if(rbBebida.isSelected()){
        //Se trata de una bebida. Se deshabilita todo lo relacionado con comida
        
        this.chkPerecedero.setEnabled(false);
        this.chkVegano.setEnabled(false);
        this.tfCalorias.setEnabled(false);
        }else{
        this.chkPerecedero.setEnabled(true);
        this.chkVegano.setEnabled(true);
        this.tfCalorias.setEnabled(true);
            
        }
        
    }//GEN-LAST:event_rbBebidaItemStateChanged

    private void btnDetalleProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDetalleProductoActionPerformed
        
        //Se comprueba si el ultimo producto era C/B
        
        
        
        switch(ultimoProducto){
            
            case 'C':
                
                //se muestran los datos del ultimo producto comida
                int pos=alComida2.size();
                
                
                JOptionPane.showMessageDialog(null,"Los datos del ultimo producto añadido son: \n"+alComida2.get(pos-1).detalleProducto(),"INFORMATION_MESSAGE", JOptionPane.INFORMATION_MESSAGE);
                
                break;
            
            case 'B':
                
                 //se muestran los datos del ultimo producto bebida
                 pos=alBebida2.size();
                 
                 JOptionPane.showMessageDialog(null,"Los datos del ultimo producto añadido son: \n"+alBebida2.get(pos-1).detalleProducto(),"INFORMATION_MESSAGE", JOptionPane.INFORMATION_MESSAGE);

                
                break;
            
            default:
                
                JOptionPane.showMessageDialog(null,"No se ha añadido ningun producto todavia","INFORMATION_MESSAGE", JOptionPane.INFORMATION_MESSAGE);
                
                break;     
                    
        }
        
    }//GEN-LAST:event_btnDetalleProductoActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDetalleProducto;
    private javax.swing.JButton btnNuevoProducto;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox chkGaseoso;
    private javax.swing.JCheckBox chkLacteo;
    private javax.swing.JCheckBox chkPerecedero;
    private javax.swing.JCheckBox chkVegano;
    private com.toedter.calendar.JDateChooser dtFechaEnvase;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCalorias;
    private javax.swing.JLabel lblFechaEnvase;
    private javax.swing.JLabel lblMedida;
    private javax.swing.JLabel lblNombre;
    private javax.swing.JLabel lblPrecio;
    private javax.swing.JLabel lblTexto;
    private javax.swing.JRadioButton rbBebida;
    private javax.swing.JRadioButton rbComida;
    private javax.swing.JTextArea taDatosProductos;
    private javax.swing.JTextField tfCalorias;
    private javax.swing.JTextField tfMedida;
    private javax.swing.JTextField tfNombre;
    private javax.swing.JTextField tfPrecio;
    // End of variables declaration//GEN-END:variables
}
